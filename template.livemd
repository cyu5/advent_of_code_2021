<!-- livebook:{"autosave_interval_s":null} -->

# Template

## Approach

### Part 1

#### Problem Summary

#### Inputs:

#### Output:

### Part 2

#### Problem Modification

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])

input_box = Kino.Input.textarea("input here")
```

## Solution Module

```elixir
defmodule Solution do
  def get_example do
    ""
  end

  def parse(input) do
    for line <- String.split(input, "\n", trim: true) do
      line
    end
  end

  def solve_part_1(input) do
    parse(input)
  end

  def solve_part_2(input) do
    parse(input)
  end
end

Solution.get_example()
|> Solution.solve_part_1()
```

## Test Solution Module

```elixir
ExUnit.start(autorun: false)

defmodule SolutionTest do
  use ExUnit.Case, async: true
  import Solution

  @part_1_solution []
  @part_2_solution []

  test "part 1 with example" do
    assert solve_part_1(get_example()) == @part_1_solution
  end

  test "part 2 with example" do
    assert solve_part_2(get_example()) == @part_2_solution
  end
end

ExUnit.run()
```

## Solve Part 1

```elixir
answer =
  Kino.Input.read(input_box)
  |> Solution.solve_part_1()

IO.puts("Answer for part 1: #{answer}")
```

## Solve Part 2

```elixir
answer =
  Kino.Input.read(input_box)
  |> Solution.solve_part_2()

IO.puts("Answer for part 2: #{answer}")
```
