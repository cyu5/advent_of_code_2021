<!-- livebook:{"autosave_interval_s":null} -->

# Day 21: Dirac Dice

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])

input_box = Kino.Input.textarea("input here")
```

## Solution Module

```elixir
defmodule Solution do
  @winning_threshold_part_1 1000
  @winning_part_2 21
  @game_cache :my_cache

  def get_example do
    "Player 1 starting position: 4
Player 2 starting position: 8"
  end

  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Stream.map(fn line -> line |> String.last() |> String.to_integer() end)
    |> Enum.map(&update_pos(&1, 0))
  end

  def update_pos(pos, moves),
    do: if(rem(pos + moves, 10) == 0, do: 10, else: rem(pos + moves, 10))

  def stream_game_simulation(p1_initial_pos, p2_initial_pos) do
    p1_stat = {p1_initial_pos, 0}
    p2_stat = {p2_initial_pos, 0}
    turn_queue = [p1_stat, p2_stat]
    dice_roll = Stream.cycle(1..100)
    turn_moves = dice_roll |> Stream.chunk_every(3) |> Stream.map(&Enum.sum/1)

    Stream.scan(turn_moves, [p1_stat, p2_stat], fn moves, [{pos, score}, next] ->
      new_pos = update_pos(pos, moves)
      new_next = {new_pos, score + new_pos}
      [next, new_next]
    end)
  end

  def game_result(p1_pos, p2_pos) do
    {[{_, _losing_score}, {_, _winning_score}], _turns} =
      stream_game_simulation(p1_pos, p2_pos)
      |> Stream.with_index(1)
      |> Enum.find(fn {[{_, _}, {_, winning_score}], _} ->
        winning_score >= @winning_threshold_part_1
      end)
  end

  def quantum_game_result(p1_pos, p2_pos) do
    :ets.new(@game_cache, [:named_table])

    quantum_game_result({p1_pos, 0}, {p2_pos, 0}, true)
    |> tap(fn _ -> :ets.delete(@game_cache) end)
  end

  defp quantum_game_result(_, {_, p2_score}, _) when p2_score >= @winning_part_2, do: {0, 1}
  defp quantum_game_result({_, p1_score}, _, _) when p1_score >= @winning_part_2, do: {1, 0}

  defp quantum_game_result(p1_stat = {p1_pos, p1_score}, p2_stat, p1_turn?) do
    case {p1_turn?, :ets.lookup(@game_cache, {p1_stat, p2_stat})} do
      {false, _} ->
        quantum_game_result(p2_stat, p1_stat, true)
        |> then(fn {p2_wins, p1_wins} -> {p1_wins, p2_wins} end)

      {true, []} ->
        possibilities = for a <- 1..3, b <- 1..3, c <- 1..3, do: a + b + c

        possibilities
        |> Stream.map(&update_pos(p1_pos, &1))
        |> Stream.map(fn new_p1_pos -> {new_p1_pos, p1_score + new_p1_pos} end)
        |> Stream.map(fn new_p1_stat -> quantum_game_result(new_p1_stat, p2_stat, false) end)
        |> Enum.reduce(fn {p1_wins, p2_wins}, {p1_total, p2_total} ->
          {p1_total + p1_wins, p2_total + p2_wins}
        end)
        |> tap(fn result -> :ets.insert(@game_cache, {{p1_stat, p2_stat}, result}) end)

      {true, [{_, cached}]} ->
        cached
    end
  end

  def solve_part_1(input) do
    parse(input)
    |> then(fn [p1_pos, p2_pos] -> game_result(p1_pos, p2_pos) end)
    |> then(fn {[{_, losing_score}, {_, _}], turns} -> losing_score * turns * 3 end)
  end

  def solve_part_2(input) do
    parse(input)
    |> then(fn [p1_pos, p2_pos] -> quantum_game_result(p1_pos, p2_pos) end)
    |> then(fn {p1_wins, p2_wins} -> max(p1_wins, p2_wins) end)
  end
end

Solution.get_example()
|> Solution.solve_part_2()
```

## Solve Part 1

```elixir
answer =
  Kino.Input.read(input_box)
  |> Solution.solve_part_1()

IO.puts("Answer for part 1: #{answer}")
```

## Solve Part 2

```elixir
answer =
  Kino.Input.read(input_box)
  |> Solution.solve_part_2()

IO.puts("Answer for part 2: #{answer}")
```
