<!-- livebook:{"autosave_interval_s":null} -->

# Day 10: Syntax Scoring

## Approach

### Part 1

#### Problem Summary

#### Inputs:

A list of list of parenthesis

#### Output:

the sum of each paren_list's score

#### Terminology

score map

* ): 3 points.
* ]: 57 points.
* }: 1197 points.
* \>: 25137 points.

### Part 2

#### Problem Modification

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])
```

## Problem Inputs

```elixir
input_box = Kino.Input.textarea("input")
```

## Solution Module

```elixir
defmodule Solution do
  @open_parens ["(", "[", "{", "<"]
  @paren_match %{
    ")" => "(",
    "]" => "[",
    "}" => "{",
    ">" => "<"
  }
  @illegal_point_map %{
    ")" => 3,
    "]" => 57,
    "}" => 1197,
    ">" => 25137
  }
  @incomplete_point_map %{
    "(" => 1,
    "[" => 2,
    "{" => 3,
    "<" => 4
  }

  def parse(input) do
    for line <- String.split(input, "\n", trim: true) do
      String.codepoints(line)
    end
  end

  def check_paren(open_paren, stack) when open_paren in @open_parens do
    {:cont, [open_paren | stack]}
  end

  def check_paren(paren, [top | rest]) do
    match = @paren_match[paren]

    if match == top do
      {:cont, rest}
    else
      {:halt, paren}
    end
  end

  def check_paren(paren, stack) do
    IO.inspect(paren)
    IO.inspect(stack)
    {:halt, "bug!"}
  end

  def solve_part_1(input) do
    for paren_list <- parse(input),
        result = Enum.reduce_while(paren_list, [], &check_paren/2),
        is_binary(result),
        illegal_paren = result do
      @illegal_point_map[illegal_paren]
    end
    |> Enum.sum()
  end

  def solve_part_2(input) do
    incomplete_scores =
      for paren_list <- parse(input),
          result = Enum.reduce_while(paren_list, [], &check_paren/2),
          is_list(result),
          incomplete_parens = result do
        for paren <- incomplete_parens,
            point = @incomplete_point_map[paren] do
          point
        end
        |> Integer.undigits(5)
      end

    Enum.sort(incomplete_scores)
    |> Enum.at(length(incomplete_scores) |> div(2))
  end
end

test_input = "[({(<(())[]>[[{[]{<()<>>
[(()[<>])]({[<{<<[]>>(
{([(<{}[<>[]}>{[]{[(<()>
(((({<>}<{<{<>}{[]{[]{}
[[<[([]))<([[{}[[()]]]
[{[{({}]{}}([{[{{{}}([]
{<[[]]>}<{[{[{[]{()[[[]
[<(<(<(<{}))><([]([]()
<{([([[(<>()){}]>(<<{{
<{([{{}}[<[[[<>{}]]]>[]]"

Solution.solve_part_2(test_input)
```

## Solve Part 1

```elixir
answer =
  Kino.Input.read(input_box)
  |> Solution.solve_part_1()

IO.puts("Answer for part 1 with input: #{answer}")
```

## Solve Part 2

```elixir
answer =
  Kino.Input.read(input_box)
  |> Solution.solve_part_2()

IO.puts("Answer for part 2 with input: #{answer}")
```

## Test Solution Module

```elixir
ExUnit.start(autorun: false)

defmodule SolutionTest do
  use ExUnit.Case, async: true
  import Solution

  test "it works" do
    assert true
  end
end

ExUnit.run()
```
