# Day 13: Transparent Origami

## Approach

### Part 1

#### Problem Summary

#### Inputs:

#### Output:

#### Notes:

1. a fold is like taking the abs value of points from a fold axis

### Part 2

#### Problem Modification

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])

input_box = Kino.Input.textarea("input here")
```

## Solution Module

```elixir
defmodule Solution do
  def parse(input) do
    [points, folds] = String.split(input, "\n\n", trim: true)

    points =
      for point <- String.split(points, "\n", trim: true) do
        [x, y] = String.split(point, ",", trim: true)
        {String.to_integer(x), String.to_integer(y)}
      end

    folds =
      for fold <- String.split(folds, "\n", trim: true) do
        <<"fold along ", axis::binary-size(1), "=", scalar::binary>> = fold
        {String.to_atom(axis), String.to_integer(scalar)}
      end

    [points, folds]
  end

  def apply_fold({x, y}, :y, line) do
    diff = abs(y - line)
    {x, line - diff}
  end

  def apply_fold({x, y}, :x, line) do
    diff = abs(x - line)
    {line - diff, y}
  end

  def fold_at({axis, line}, points) do
    for point <- points,
        uniq: true do
      apply_fold(point, axis, line)
    end
  end

  def max(points) do
    x =
      points
      |> Stream.map(&Kernel.elem(&1, 0))
      |> Enum.max()

    y =
      points
      |> Stream.map(&Kernel.elem(&1, 1))
      |> Enum.max()

    {x, y}
  end

  def format(output) do
    output
    |> Stream.map(&Enum.join/1)
    |> Enum.join("\n")
  end

  def draw(points) do
    {x, y} = max(points)
    points = MapSet.new(points)

    canvas =
      for j <- 0..y do
        for i <- 0..x do
          if MapSet.member?(points, {i, j}) do
            "#"
          else
            "."
          end
        end
      end

    format(canvas)
  end

  def solve_part_1(input) do
    [points, folds] = parse(input)

    folds
    |> hd
    |> fold_at(points)
    |> Enum.count()
  end

  def solve_part_2(input) do
    [points, folds] = parse(input)

    folds
    |> Enum.reduce(points, &fold_at/2)
    |> draw
    |> IO.puts()
  end
end

test_input =
  "6,10
0,14
9,10
0,3
10,4
4,11
6,0
6,12
4,1
0,13
10,12
3,4
3,0
8,4
1,10
2,14
8,10
9,0

fold along y=7
fold along x=5"
  |> Solution.solve_part_2()
```

## Solve Part 1

```elixir
answer =
  Kino.Input.read(input_box)
  |> Solution.solve_part_1()

IO.puts("Answer for part 1: #{answer}")
```

## Solve Part 2

```elixir
answer =
  Kino.Input.read(input_box)
  |> Solution.solve_part_2()

IO.puts("Answer for part 2: #{answer}")
# JZGUAPRB
```

## Test Solution Module

```elixir
ExUnit.start(autorun: false)

defmodule SolutionTest do
  use ExUnit.Case, async: true
  import Solution

  test "it works" do
    assert true
  end
end

ExUnit.run()
```
